#!/usr/bin/env python3

import os
from pathlib import Path
import argparse
from subprocess import check_call

def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("mp4_dir", type=str, help="Dir to put mp4 files")
    parser.add_argument(
        "-o", "--output", default=None, type=str, help="mp3 dir(or file), by default same as mp4 dir(or file)"
    )
    parser.add_argument("-ac", default="2", type=str)
    parser.add_argument("-ab", default="320k", type=str)
    parser.add_argument("-ar", default="48000", type=str)
    return parser.parse_args()

def convert_to_mp3(input_file:Path, output_file:Path, ac:str, ab:str, ar:str):
    return check_call([
        "ffmpeg",
        "-i", input_file.resolve(),
        "-vn", 
        "-acodec", "libmp3lame",
        "-ac", ac,
        "-ab", ab,
        "-ar", ar,
        output_file.resolve()
    ])

def main():
    args = parse_args()
    input_dir = Path(args.mp4_dir)
    output_dir = Path(args.output or args.mp4_dir)
    if input_dir.is_file():
        output_file = Path(args.mp4_dir).with_suffix(".mp3") if args.output is None else Path(args.output)
        convert_to_mp3(input_dir, output_file, args.ac, args.ab, args.ar)
    else:
        for file in input_dir.iterdir():
            if file.is_file() and file.suffix == ".mp4":
                output_file = Path(os.path.join(output_dir,file.with_suffix(".mp3").name))
                convert_to_mp3(file, output_file, args.ac, args.ab, args.ar)


if __name__=="__main__":
    main()